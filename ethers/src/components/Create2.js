import {ethers} from "ethers";

async function main() {
    // 使用 CREATE2 直接部署时的地址计算公式为：
    // address = keccak256(
    //     0xff +
    //     deployer_address +
    //     salt +
    //     keccak256(init_code)
    // )[12:]  // 取哈希的后 20 字节
    const deployerAddress = "0xCAC27E4F613233dD1DCEBf9B3c0fB6F39B8FEF32";

    // 构造函数参数编码
    const encodedArgs = ethers.AbiCoder.defaultAbiCoder().encode(
        ['string'],
        ['Hello, Blockchain!']
    ).slice(2); // 去掉 "0x"
    console.log("构造函数参数编码:", encodedArgs)

    // 拼接 initCode (字节码 + 参数)
    const initCode = `0x60806040523480156200001157600080fd5b5060405162000855380380620008558339818101604052810190620000379190620001e3565b80600090816200004891906200047f565b505062000566565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000b9826200006e565b810181811067ffffffffffffffff82111715620000db57620000da6200007f565b5b80604052505050565b6000620000f062000050565b9050620000fe8282620000ae565b919050565b600067ffffffffffffffff8211156200012157620001206200007f565b5b6200012c826200006e565b9050602081019050919050565b60005b83811015620001595780820151818401526020810190506200013c565b60008484015250505050565b60006200017c620001768462000103565b620000e4565b9050828152602081018484840111156200019b576200019a62000069565b5b620001a884828562000139565b509392505050565b600082601f830112620001c857620001c762000064565b5b8151620001da84826020860162000165565b91505092915050565b600060208284031215620001fc57620001fb6200005a565b5b600082015167ffffffffffffffff8111156200021d576200021c6200005f565b5b6200022b84828501620001b0565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028757607f821691505b6020821081036200029d576200029c6200023f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002c8565b620003138683620002c8565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003606200035a62000354846200032b565b62000335565b6200032b565b9050919050565b6000819050919050565b6200037c836200033f565b620003946200038b8262000367565b848454620002d5565b825550505050565b600090565b620003ab6200039c565b620003b881848462000371565b505050565b5b81811015620003e057620003d4600082620003a1565b600181019050620003be565b5050565b601f8211156200042f57620003f981620002a3565b6200040484620002b8565b8101602085101562000414578190505b6200042c6200042385620002b8565b830182620003bd565b50505b505050565b600082821c905092915050565b6000620004546000198460080262000434565b1980831691505092915050565b60006200046f838362000441565b9150826002028217905092915050565b6200048a8262000234565b67ffffffffffffffff811115620004a657620004a56200007f565b5b620004b282546200026e565b620004bf828285620003e4565b600060209050601f831160018114620004f75760008415620004e2578287015190505b620004ee858262000461565b8655506200055e565b601f1984166200050786620002a3565b60005b8281101562000531578489015182556001820191506020850194506020810190506200050a565b868310156200055157848901516200054d601f89168262000441565b8355505b6001600288020188555050505b505050505050565b6102df80620005766000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636b473fca1461003b578063e21f37ce14610059575b600080fd5b610043610077565b6040516100509190610227565b60405180910390f35b610061610109565b60405161006e9190610227565b60405180910390f35b60606000805461008690610278565b80601f01602080910402602001604051908101604052809291908181526020018280546100b290610278565b80156100ff5780601f106100d4576101008083540402835291602001916100ff565b820191906000526020600020905b8154815290600101906020018083116100e257829003601f168201915b5050505050905090565b6000805461011690610278565b80601f016020809104026020016040519081016040528092919081815260200182805461014290610278565b801561018f5780601f106101645761010080835404028352916020019161018f565b820191906000526020600020905b81548152906001019060200180831161017257829003601f168201915b505050505081565b600081519050919050565b600082825260208201905092915050565b60005b838110156101d15780820151818401526020810190506101b6565b60008484015250505050565b6000601f19601f8301169050919050565b60006101f982610197565b61020381856101a2565b93506102138185602086016101b3565b61021c816101dd565b840191505092915050565b6000602082019050818103600083015261024181846101ee565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061029057607f821691505b6020821081036102a3576102a2610249565b5b5091905056fea26469706673582212202309abe30e8996d5259bc76e7c875832f4fbb807880fbf3591cc081f185672ec64736f6c63430008180033${encodedArgs}`;
    const initCodeHash = ethers.keccak256(initCode, encodedArgs);
    console.log("initCodeHash:", initCodeHash);

    // 创建 salt（盐值）
    const salt = ethers.keccak256(ethers.toUtf8Bytes("A"));
    console.log("salt:", salt)

    // 计算预计地址
    const predictedAddress = `${ethers.keccak256(
        `0xff${deployerAddress.slice(2)}${salt.slice(2)}${initCodeHash.slice(2)}`
    ).slice(-40)}`;

    console.log("预计合约地址:", `0x${predictedAddress}`);
}

main();


